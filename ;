import random
from datetime import datetime

from models.database import Database
from models.card import Card
from core.space_repitition import calculate_next_review


def run_session(cards):
    """
    Handles Showing the cards
    """
    db = Database()

    res_map = {0: 'easy', 1: "good", 2: "hard", 3: "good"}

    for card in cards:
        print(card.arabic_word)
        response = int(input("0-Easy 1-Good 2-Hard 3-Again >> "))
        # Get new interval
        new_card = calculate_next_review(card, res_map[response])

        # Update the repititions
        new_card.repititions += 1

        # Update the last reviewed
        new_card.last_review = datetime.now()
        # Update card state
        if (new_card.card_state == "new"):
            new_card.card_state = "learning"

        db.update_card(new_card)

    print("Well Done!!!")


def gen_card_objs(data):
    card_objs = []
    for datum in data:
        card_objs.append(Card._from_tuple(datum))

    # Randomize cards
    random.shuffle(card_objs)

    return card_objs


def review_new_cards():
    """
    Review all new cards only
    """
    db = Database()
    # Get all new cards
    cards = db.get_new_cards()

    # Cards present
    if len(cards) > 0:
        # Create card objects
        card_objs = gen_card_objs(cards)

        # Run session
        run_session(card_objs)

    else:
        print("No new cards")


def review_due_cards():
    """
    Review all the cards that have passed their review date
    """
    db = Database()
    # Get all new cards
    cards = db.get_due_cards()

    # Cards present
    if len(cards) > 0:
        # Create card objects
        card_objs = gen_card_objs(cards)

        # Run session
        run_session(card_objs)

    else:
        print("No new cards")

def cram_session():
    """
    Crams a larger number of words for revision
    """

if __name__ == "__main__":
    review_new_cards()
